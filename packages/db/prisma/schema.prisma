// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model ProductCategory {
  id                           Int                            @id @default(autoincrement())
  name                         String
  parentId                     Int?
  children                     ProductCategory[]              @relation("ProductCategoryToProductCategory")
  parent                       ProductCategory?               @relation("ProductCategoryToProductCategory", fields: [parentId], references: [id])
  products                     Product[]
  ProductSpecificationTemplate ProductSpecificationTemplate[]
  path       String                         @default("") // Field to store the category path
  level      Int                            @default(0)  // Field to indicate the level of the category in the hierarchy

  @@map("product_categories")
}

model Product {
  id             Int                    @id @default(autoincrement())
  name           String
  categoryId     Int
  description    String?
  price          Float
  imageUrl       String?
  specifications ProductSpecification[]

  category ProductCategory @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductSpecificationTemplate {
  id             Int                    @id @default(autoincrement())
  categoryId     Int
  key            String // e.g., "Print Speed"
  category       ProductCategory        @relation(fields: [categoryId], references: [id])
  specifications ProductSpecification[]

  @@map("product_specification_templates")
}

model ProductSpecification {
  id                      Int    @id @default(autoincrement())
  productId               Int
  specificationTemplateId Int
  value                   String // e.g., "20 PPM"

  product               Product                      @relation(fields: [productId], references: [id])
  specificationTemplate ProductSpecificationTemplate @relation(fields: [specificationTemplateId], references: [id])

  @@map("product_specifications")
}


// NextAuth.js Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

