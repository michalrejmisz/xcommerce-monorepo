// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

// NextAuth.js Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductCategory {
  id                           Int                            @id @default(autoincrement())
  name                         String
  parentId                     Int?
  children                     ProductCategory[]              @relation("ProductCategoryToProductCategory")
  parent                       ProductCategory?               @relation("ProductCategoryToProductCategory", fields: [parentId], references: [id])
  products                     Product[]
  specificationTemplateGroups  SpecificationTemplateGroup[]
  path                         String                         @default("") // Field to store the category path
  level                        Int                            @default(0)  // Field to indicate the level of the category in the hierarchy
  isLeaf                       Boolean                        @default(false)
  @@map("product_categories")
}

model Product {
  id                           Int                            @id @default(autoincrement())
  name                         String
  categoryId                   Int
  description                  String?
  price                        Float
  imageUrl                     String?
  specifications               ProductSpecification[]
  templates                    ProductToTemplate[]            // Relation through join table
  category                     ProductCategory                @relation(fields: [categoryId], references: [id])

  @@map("products")
}


model SpecificationTemplateGroup {
  id                           Int                            @id @default(autoincrement())
  name                         String
  description                  String?
  categoryId                   Int?                           // Optional, if null, the group is global
  isGlobal                     Boolean                        // Determines if the group is global
  templates                    ProductSpecificationTemplate[]
  category                     ProductCategory?               @relation(fields: [categoryId], references: [id])

  @@map("specification_template_groups")
}

model ProductSpecificationTemplate {
  id                           Int                            @id @default(autoincrement())
  groupId                      Int?                           // Optional, foreign key to group
  key                          String
  description                  String?
  specifications               ProductSpecification[]
  options                      SpecificationOption[]
  group                        SpecificationTemplateGroup?    @relation(fields: [groupId], references: [id])
  products                     ProductToTemplate[]            // Relation through join table

  @@map("product_specification_templates")
}

model SpecificationOption {
  id                           Int                            @id @default(autoincrement())
  specificationTemplateId      Int
  value                        String
  specificationTemplate        ProductSpecificationTemplate   @relation(fields: [specificationTemplateId], references: [id])
  productSpecifications        ProductSpecification[]
  isMultipleChoice             Boolean                        @default(false)
  @@map("specification_options")
}

model ProductSpecification {
  id                           Int                            @id @default(autoincrement())
  productId                    Int
  specificationTemplateId      Int
  specificationOptionId        Int?                           // Optional, references SpecificationOption
  value                        String?                        // Optional, for free-form values if no option selected
  product                      Product                        @relation(fields: [productId], references: [id])
  specificationTemplate        ProductSpecificationTemplate   @relation(fields: [specificationTemplateId], references: [id])
  specificationOption          SpecificationOption?           @relation(fields: [specificationOptionId], references: [id])

  @@map("product_specifications")
}

model ProductToTemplate {
  productId                    Int
  templateId                   Int
  product                      Product                        @relation(fields: [productId], references: [id])
  template                     ProductSpecificationTemplate   @relation(fields: [templateId], references: [id])

  @@id([productId, templateId])
  @@map("product_to_template")
}
